Type,Status,Priority,Resolution,AffectsVersions,FixVersions,Components,Assignee,Reporter,Description,Comments
Bug,RESOLVED,Minor,Fixed,2.18.0,2.17.5: 2.18.2: 2.19.0,camel-swagger,Claus Ibsen,Bob Paulin,Assume I have rest path"
rest(""/test"").get().type(ClassA.class).to(""direct:someRoute"");"
"
rest(""/testSub"").get().type(ClassB.class).to(""direct:someOtherRoute"");"
And in the type ClassA contains a reference to ClassB."
Within the Swagger Doc the path for ClassA renders as expected:"
/test:"
    get:"
      responses:"
        200:"
          schema:"
            $ref: '#/definitions/ClassA'"
However ClassB gets a string parameter scheme"
 "
/testSub:"
    get:"
      responses:"
        200:"
          schema:"
             type : 'string'"
             format : 'com.ClassB'"
However I'd expect it to be:"
/testSub:"
    get:"
      responses:"
        200:"
          schema:"
            $ref: '#/definitions/ClassB',Comments------ASF GitHub Bot added a comment - 14/Dec/16 14:55"
GitHub user bobpaulin opened a pull request:"
https://github.com/apache/camel/pull/1348"
CAMEL-10597 - Allow addition of x-className to empty VendorExtensions"
You can merge this pull request into a Git repository by running:"
$ git pull https://github.com/bobpaulin/camel CAMEL-10597"
Alternatively you can review and apply these changes as the patch at:"
https://github.com/apache/camel/pull/1348.patch"
To close this pull request: make a commit to your master/trunk branch"
with (at least) the following in the commit message:"
This closes #1348------Bob Paulin added a comment - 14/Dec/16 14:56"
PR included https://github.com/apache/camel/pull/1348------Claus Ibsen added a comment - 14/Dec/16 15:31"
Thanks for the PR------ASF GitHub Bot added a comment - 14/Dec/16 15:34"
Github user bobpaulin closed the pull request at:"
https://github.com/apache/camel/pull/1348------Andrea Cosentino added a comment - 15/Dec/16 14:05"
2.17.x is affected too Claus Ibsen------Claus Ibsen added a comment - 15/Dec/16 14:26"
Thanks its backported now------
 
New Feature,RESOLVED,Major,Fixed,None,2.19.0,camel-core: tooling,Claus Ibsen,Claus Ibsen,Some developers would like to keep a JVM running with Camel and then be able to edit a xml file with <camelContext> or <routes> and then have a file watcher automatic detect the file change and reload the routes."
We can have some kind of functionality of that in camel-core for 3rd party to hook into. And then add it to mvn camel:run for some apps where you can quickly bootup a Camel JVM and then scan for file changes with reload."
Mind that this will only work for Camel routes as its not for spring <bean> or OSGi <blueprint> etc as they have their own deployment model. But with the 3rd party hooks: then this may be a way of triggering mvn camel:run to trigger a osgi blueprint reload also when it runs in pojosr mode. Or a spring boot live reload etc.,Comments------Claus Ibsen added a comment - 19/Dec/16 12:18"
Darn the fancy file watcher API is dead-slow on OSX also for java 8"
http://stackoverflow.com/questions/9588737/is-java-7-watchservice-slow-for-anyone-else------Claus Ibsen added a comment - 19/Dec/16 15:44"
There is a feature now. We can always improve on it: and get some more community feedback------
 
Improvement,RESOLVED,Minor,Won't Fix,2.18.1,None,camel-core,Unassigned,Greg Vanore,I had noticed that IntrospectionSupport uses the type converter system: so was hoping to inject my application config POJOs and then have them converted to the appropriate type for certain properties where the configuration is on a per-object basis."
My test setup was..."
... create a route: from(""file://tmp/test?noop=true&idempotentRepository=#foo"")."
... add a bean to my test registry: Runnable with name foo."
... register a converter that took a Runnable and just hardcoded a MemoryIdempotentRepository as the result. I know this is strange but I just wanted to prove the conversion took place."
Conversion didn't take place: so I set a breakpoint and took a look at IntrospectionSupport. (2.18.1) On lines 531-534: a little bit of logic makes sure that the reference is the exact type of the setter: or the setter is skipped. This effectively aborts type conversions for references."
I did a casual check through history: looks like this was introduced around 2.13.0."
The most obvious workaround for this is for us to use a CompositeRegistry and use an established nomenclature (e.g. accountName/idempotentRepository for us to do the fetch and conversion in one spot."
If you deem this a non-feature: it would be nice to at least pass the parameter type to the CamelContextHelper#lookup utility. That way: when we write our custom registry: the lookups will supply a type hint (e.g. lookupByNameAndType instead of just lookupByName. Then we won't be forced to come up with a nomenclature that we have to parse: or we could choose to make a generic TypeConverterRegistry that does a lookup by name and then a mandatory conversion.,Comments------Claus Ibsen added a comment - 16/Dec/16 10:19 - edited"
This is not so idel to do a type conversion of the reference: as there may be overloaded setter methods and you need to find the best match to use first that are not doing unnecessary type conversions.------Claus Ibsen added a comment - 16/Dec/16 10:20"
So maybe only if any of the regular setter didn't match nicely it can attempt a fallback with type conversion based on the parameter types of the setters.------Greg Vanore added a comment - 16/Dec/16 20:22"
I agree that doing a type conversion always is not ideal. A conversion as a fallback before giving up sounds good though.------Claus Ibsen added a comment - 28/Feb/17 10:51"
Lets keep current behavior which works fine------
 
Test,RESOLVED,Minor,Fixed,None,2.19.0,None,Claus Ibsen,Claus Ibsen,This causes CI server to fail sometimes if the port number is already in use"
org.apache.camel.component.gridfs.GridFsConsumerTest.testAttribute"
Failing for the past 1 build (Since Unstable#1067 )"
Took 37 ms."
Error Message"
Cannot load configuration class: org.apache.camel.component.gridfs.EmbedMongoConfiguration"
Stacktrace"
java.lang.IllegalStateException: Cannot load configuration class: org.apache.camel.component.gridfs.EmbedMongoConfiguration"
Caused by: java.lang.IllegalStateException: Unable to load cache item"
Caused by: java.lang.ExceptionInInitializerError"
Caused by: java.lang.RuntimeException:"
java.io.IOException: Could not start process: failed errno:98 Address already in use for socket: 0.0.0.0:35949"
2016-12-14T23:31:17.332+0000 E NETWORK [initandlisten] addr already in use"
Caused by: java.io.IOException:"
Could not start process: failed errno:98 Address already in use for socket: 0.0.0.0:35949"
2016-12-14T23:31:17.332+0000 E NETWORK [initandlisten] addr already in use,Comments------Ravi Godbole added a comment - 28/Feb/17 12:03"
It seems that port is already assigned like this."
private static final int PORT = findAvailableTcpPort();"
Is it consistent across CI builds ?------Claus Ibsen added a comment - 28/Feb/17 12:27"
Yeah it seems it has been fixed------
 
Bug,RESOLVED,Major,Fixed,2.18.0: 2.18.1: 2.19.0,2.18.2: 2.19.0,camel-blueprint: (1),Grzegorz Grzybek,Aurelien Pupier,Using a simple Content-based Router example leads to this issue."
With 2.17.3: it is working fine."
we can notice that the route is up and running before the timeout occurs (I dropped a file to the endpoint and it was well executed)"
[INFO] Scanning for projects..."
[INFO]                                                                         "
[INFO] ------------------------------------------------------------------------"
[INFO] Building Fuse CBR Quickstart 1.0.0-SNAPSHOT"
[INFO] ------------------------------------------------------------------------"
[INFO] "
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ camel-blueprint-cbr ---"
[INFO] Deleting C:\install\eclipse-neon\eclipse\ws_fusetooling_dev with space\cbr218\target"
[INFO] "
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ camel-blueprint-cbr ---"
[INFO] Using 'UTF-8' encoding to copy filtered resources."
[INFO] Copying 2 resources"
[INFO] "
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ camel-blueprint-cbr ---"
[INFO] No sources to compile"
[INFO] "
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ camel-blueprint-cbr ---"
[INFO] Not copying test resources"
[INFO] "
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ camel-blueprint-cbr ---"
[INFO] Not compiling test sources"
[INFO] "
[INFO] --- maven-surefire-plugin:2.19.1:test (default-test) @ camel-blueprint-cbr ---"
[INFO] Tests are skipped."
[INFO] "
[INFO] --- maven-bundle-plugin:3.2.0:bundle (default-bundle) @ camel-blueprint-cbr ---"
[INFO] "
[INFO] >>> camel-maven-plugin:2.18.1:run (default-cli) > test-compile @ camel-blueprint-cbr >>>"
[INFO] "
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ camel-blueprint-cbr ---"
[INFO] Using 'UTF-8' encoding to copy filtered resources."
[INFO] Copying 2 resources"
[INFO] "
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ camel-blueprint-cbr ---"
[INFO] No sources to compile"
[INFO] "
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ camel-blueprint-cbr ---"
[INFO] Not copying test resources"
[INFO] "
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ camel-blueprint-cbr ---"
[INFO] Not compiling test sources"
[INFO] "
[INFO] <<< camel-maven-plugin:2.18.1:run (default-cli) < test-compile @ camel-blueprint-cbr <<<"
[INFO] "
[INFO] --- camel-maven-plugin:2.18.1:run (default-cli) @ camel-blueprint-cbr ---"
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext"
[INFO] Starting Camel ..."
[                      Thread-2] RawBuilder                     INFO  Copy thread finished."
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting"
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started"
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting"
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started"
[         Blueprint Extender: 1] BlueprintContainerImpl         INFO  Bundle cbr218/1.0.0.SNAPSHOT is waiting for namespace handlers [http://camel.apache.org/schema/blueprint]"
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.18.1 (CamelContext: cbr-example-context) is starting"
[         Blueprint Extender: 1] ManagedManagementStrategy      INFO  JMX is enabled"
[         Blueprint Extender: 1] DefaultManagementAgent         INFO  ManagementAgent detected JVM system properties: {org.apache.camel.jmx.createRmiConnector=true}"
[KTOP-9NT300B:1099/jmxrmi/camel] DefaultManagementAgent         INFO  JMX Connector thread started and listening at: service:jmx:rmi:///jndi/rmi://DESKTOP-9NT300B:1099/jmxrmi/camel"
[         Blueprint Extender: 1] DefaultRuntimeEndpointRegistry INFO  Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)"
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html"
[         Blueprint Extender: 1] XPathBuilder                   INFO  Created default XPathFactory com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl@3f24f264"
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Route: cbr-route started and consuming from: file://work/cbr/input"
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Total 1 routes: of which 1 are started."
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.18.1 (CamelContext: cbr-example-context) started in 0.535 seconds"
[ead #2 - file://work/cbr/input] cbr-route                      INFO  Receiving order ID-DESKTOP-9NT300B-51935-1481791551205-0-1"
[ead #2 - file://work/cbr/input] cbr-route                      INFO  Sending order ID-DESKTOP-9NT300B-51935-1481791551205-0-1 to another country"
[ead #2 - file://work/cbr/input] cbr-route                      INFO  Done processing ID-DESKTOP-9NT300B-51935-1481791551205-0-1"
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint.cm/1.0.6"
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle cbr218/1.0.0.SNAPSHOT"
[mel.test.blueprint.Main.main()] BlueprintCamelContext          INFO  Apache Camel 2.18.1 (CamelContext: cbr-example-context) is shutting down"
[mel.test.blueprint.Main.main()] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 300 seconds)"
[text) thread #3 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: cbr-route shutdown complete: was consuming from: file://work/cbr/input"
[mel.test.blueprint.Main.main()] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds"
[mel.test.blueprint.Main.main()] BlueprintCamelContext          INFO  Apache Camel 2.18.1 (CamelContext: cbr-example-context) uptime 28.869 seconds"
[mel.test.blueprint.Main.main()] BlueprintCamelContext          INFO  Apache Camel 2.18.1 (CamelContext: cbr-example-context) is shutdown in 0.019 seconds"
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint.core/1.4.4"
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint/2.18.1"
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping"
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped"
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping"
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped"
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1481791550078"
[ERROR] *************************************"
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main"
[ERROR] "
java.lang.reflect.InvocationTargetException"
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)"
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)"
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)"
 at java.lang.reflect.Method.invoke(Method.java:497)"
 at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:472)"
 at java.lang.Thread.run(Thread.java:745)"
Caused by: java.lang.RuntimeException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"""
 at org.apache.camel.test.blueprint.CamelBlueprintHelper.waitForBlueprintContainer(CamelBlueprintHelper.java:363)"
 at org.apache.camel.test.blueprint.Main.doStart(Main.java:111)"
 at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)"
 at org.apache.camel.main.MainSupport.run(MainSupport.java:138)"
 at org.apache.camel.main.MainSupport.run(MainSupport.java:390)"
 at org.apache.camel.test.blueprint.Main.main(Main.java:82)"
 ... 6 more"
[ERROR] *************************************"
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-1:5:org.apache.camel.test.blueprint.Main] was interrupted but is still alive after waiting at least 15000msecs"
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-1:5:org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption"
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-5:5:org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption"
[WARNING] NOTE: 2 thread(s) did not finish despite being asked to  via interruption. This is not a problem with exec:java: it is a problem with the running code. Although not serious: it should be remedied."
[WARNING] Couldn't destroy threadgroup org.apache.camel.maven.RunMojo$IsolatedThreadGroup[name=org.apache.camel.test.blueprint.Main:maxpri=10]"
java.lang.IllegalThreadStateException"
 at java.lang.ThreadGroup.destroy(ThreadGroup.java:778)"
 at org.apache.camel.maven.RunMojo.execute(RunMojo.java:505)"
 at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)"
 at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)"
 at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)"
 at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)"
 at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)"
 at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)"
 at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)"
 at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)"
 at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)"
 at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)"
 at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)"
 at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)"
 at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)"
 at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)"
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)"
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)"
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)"
 at java.lang.reflect.Method.invoke(Method.java:497)"
 at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)"
 at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)"
 at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)"
 at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)"
[INFO] ------------------------------------------------------------------------"
[INFO] BUILD FAILURE"
[INFO] ------------------------------------------------------------------------"
[INFO] Total time: 49.194 s"
[INFO] Finished at: 2016-12-15T09:46:35+01:00"
[INFO] Final Memory: 44M/547M"
[INFO] ------------------------------------------------------------------------"
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.18.1:run (default-cli) on project camel-blueprint-cbr: null: MojoExecutionException: InvocationTargetException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"" -> [Help 1]"
[ERROR] "
[ERROR] To see the full stack trace of the errors: re-run Maven with the -e switch."
[ERROR] Re-run Maven using the -X switch to enable full debug logging."
[ERROR] "
[ERROR] For more information about the errors and possible solutions: please read the following articles:"
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException"
[                      Thread-1] MainSupport$HangupInterceptor  INFO  Received hang up - stopping the main instance."
my first guess is that Camel 2.18.1 is starting faster and that some events occurs in the same milliseconds (considering the the jvm precision): https://github.com/apache/camel/blame/master/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java#L344,Comments------Claus Ibsen added a comment - 15/Dec/16 10:24"
This can be re-produced using"
mvn archetype:generate"
choose camel-archetype-blueprint"
select 2.18.1 version"
create the project"
modify the pom.xml and remove <scope>test</scope> for all the loggers"
mvn compile camel:run"
davsclaus:/Users/davsclaus/Documents/workspace/blue/$ mvn clean compile camel:run"
[INFO] Scanning for projects..."
[INFO]"
[INFO] ------------------------------------------------------------------------"
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT"
[INFO] ------------------------------------------------------------------------"
[INFO]"
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ blue ---"
[INFO] Deleting /Users/davsclaus/Documents/workspace/blue/target"
[INFO]"
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ blue ---"
[INFO] Using 'UTF-8' encoding to copy filtered resources."
[INFO] Copying 2 resources"
[INFO]"
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ blue ---"
[INFO] Changes detected - recompiling the module!"
[INFO] Compiling 2 source files to /Users/davsclaus/Documents/workspace/blue/target/classes"
[INFO]"
[INFO] >>> camel-maven-plugin:2.18.1:run (default-cli) > test-compile @ blue >>>"
[INFO]"
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ blue ---"
[INFO] Using 'UTF-8' encoding to copy filtered resources."
[INFO] Copying 2 resources"
[INFO]"
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ blue ---"
[INFO] Nothing to compile - all classes are up to date"
[INFO]"
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ blue ---"
[INFO] Using 'UTF-8' encoding to copy filtered resources."
[INFO] Copying 1 resource"
[INFO]"
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ blue ---"
[INFO] Changes detected - recompiling the module!"
[INFO] Compiling 3 source files to /Users/davsclaus/Documents/workspace/blue/target/test-classes"
[INFO] /Users/davsclaus/Documents/workspace/blue/src/test/java/com/foo/BlueprintBeanPropertiesOverrideFromTestRouteTest.java: /Users/davsclaus/Documents/workspace/blue/src/test/java/com/foo/BlueprintBeanPropertiesOverrideFromTestRouteTest.java uses unchecked or unsafe operations."
[INFO] /Users/davsclaus/Documents/workspace/blue/src/test/java/com/foo/BlueprintBeanPropertiesOverrideFromTestRouteTest.java: Recompile with -Xlint:unchecked for details."
[INFO]"
[INFO] <<< camel-maven-plugin:2.18.1:run (default-cli) < test-compile @ blue <<<"
[INFO]"
[INFO] --- camel-maven-plugin:2.18.1:run (default-cli) @ blue ---"
[INFO] camel-blueprint detected on classpath"
[INFO] OSGi Blueprint XML files detected in directory /Users/davsclaus/Documents/workspace/blue/src/main/resources/OSGI-INF/blueprint"
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext"
[INFO] Starting Camel ..."
Dec 15: 2016 11:21:22 AM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run"
INFO: Copy thread finished."
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting"
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started"
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting"
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started"
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint.cm/1.0.6"
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint.core/1.4.4"
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint/2.18.1"
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping"
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped"
[ERROR] *************************************"
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main"
[ERROR]"
java.lang.reflect.InvocationTargetException"
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)"
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)"
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)"
 at java.lang.reflect.Method.invoke(Method.java:483)"
 at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:472)"
 at java.lang.Thread.run(Thread.java:745)"
Caused by: java.lang.RuntimeException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"""
 at org.apache.camel.test.blueprint.CamelBlueprintHelper.waitForBlueprintContainer(CamelBlueprintHelper.java:363)"
 at org.apache.camel.test.blueprint.Main.doStart(Main.java:111)"
 at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)"
 at org.apache.camel.main.MainSupport.run(MainSupport.java:138)"
 at org.apache.camel.main.MainSupport.run(MainSupport.java:390)"
 at org.apache.camel.test.blueprint.Main.main(Main.java:82)"
 ... 6 more"
[ERROR] *************************************"
[INFO] ------------------------------------------------------------------------"
[INFO] BUILD FAILURE"
[INFO] ------------------------------------------------------------------------"
[INFO] Total time: 40.306 s"
[INFO] Finished at: 2016-12-15T11:21:55+01:00"
[INFO] Final Memory: 31M/341M"
[INFO] ------------------------------------------------------------------------"
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.18.1:run (default-cli) on project blue: null: MojoExecutionException: InvocationTargetException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"" -> [Help 1]------Claus Ibsen added a comment - 15/Dec/16 10:27"
Its also a problem with 2.18.0------Claus Ibsen added a comment - 15/Dec/16 12:59"
The example: camel-example-transformer-blueprint"
Will fail on shutdown instead: eg if you rub"
mvn compile camel:run"
Then it startup and when it stops it fails"
2016-12-15 13:58:11:554 [int.Main.main()] INFO  BlueprintExtender              - Destroying BlueprintContainer for bundle org.apache.aries.blueprint.cm/1.0.6"
2016-12-15 13:58:11:557 [int.Main.main()] INFO  BlueprintExtender              - Destroying BlueprintContainer for bundle org.apache.camel.camel-example-transformer-blueprint/2.19.0.SNAPSHOT"
2016-12-15 13:58:11:558 [t Dispatcher: 1] INFO  BlueprintCamelContext          - Stopping Camel Context TransformerBlueprint"
2016-12-15 13:58:11:558 [t Dispatcher: 1] INFO  BlueprintCamelContext          - Apache Camel 2.19.0-SNAPSHOT (CamelContext: TransformerBlueprint) is shutting down"
2016-12-15 13:58:11:559 [t Dispatcher: 1] INFO  DefaultShutdownStrategy        - Starting to graceful shutdown 2 routes (timeout 300 seconds)"
2016-12-15 13:58:11:563 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: timer-route shutdown complete: was consuming from: timer://foo?period=5s"
2016-12-15 13:58:11:564 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: xslt-route shutdown complete: was consuming from: direct://a"
2016-12-15 13:58:11:564 [t Dispatcher: 1] INFO  DefaultShutdownStrategy        - Graceful shutdown of 2 routes completed in 0 seconds"
2016-12-15 13:58:11:598 [t Dispatcher: 1] INFO  BlueprintCamelContext          - Apache Camel 2.19.0-SNAPSHOT (CamelContext: TransformerBlueprint) uptime 28.194 seconds"
2016-12-15 13:58:11:599 [t Dispatcher: 1] INFO  BlueprintCamelContext          - Apache Camel 2.19.0-SNAPSHOT (CamelContext: TransformerBlueprint) is shutdown in 0.040 seconds"
2016-12-15 13:58:11:599 [int.Main.main()] INFO  BlueprintExtender              - Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint/2.19.0.SNAPSHOT"
2016-12-15 13:58:11:600 [int.Main.main()] INFO  BlueprintExtender              - Destroying BlueprintContainer for bundle org.apache.aries.blueprint.core/1.4.4"
2016-12-15 13:58:11:604 [int.Main.main()] INFO  Activator                      - Camel activator stopping"
2016-12-15 13:58:11:605 [int.Main.main()] INFO  Activator                      - Camel activator stopped"
[ERROR] *************************************"
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main"
[ERROR]"
java.lang.reflect.InvocationTargetException"
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)"
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)"
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)"
 at java.lang.reflect.Method.invoke(Method.java:483)"
 at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:472)"
 at java.lang.Thread.run(Thread.java:745)"
Caused by: java.lang.RuntimeException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"""
 at org.apache.camel.test.blueprint.CamelBlueprintHelper.waitForBlueprintContainer(CamelBlueprintHelper.java:363)"
 at org.apache.camel.test.blueprint.Main.doStart(Main.java:111)"
 at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)"
 at org.apache.camel.main.MainSupport.run(MainSupport.java:138)"
 at org.apache.camel.main.MainSupport.run(MainSupport.java:390)"
 at org.apache.camel.test.blueprint.Main.main(Main.java:82)"
 ... 6 more"
[ERROR] *************************************"
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-2:5:org.apache.camel.test.blueprint.Main] was interrupted but is still alive after waiting at least 2992msecs"
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-2:5:org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption"
[WARNING] NOTE: 1 thread(s) did not finish despite being asked to  via interruption. This is not a problem with exec:java: it is a problem with the running code. Although not serious: it should be remedied."
[WARNING] Couldn't destroy threadgroup org.apache.camel.maven.RunMojo$IsolatedThreadGroup[name=org.apache.camel.test.blueprint.Main:maxpri=10]"
java.lang.IllegalThreadStateException"
 at java.lang.ThreadGroup.destroy(ThreadGroup.java:778)"
 at org.apache.camel.maven.RunMojo.execute(RunMojo.java:505)"
 at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:132)"
 at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)"
 at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)"
 at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)"
 at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)"
 at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)"
 at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)"
 at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:120)"
 at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:355)"
 at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)"
 at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)"
 at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:216)"
 at org.apache.maven.cli.MavenCli.main(MavenCli.java:160)"
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)"
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)"
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)"
 at java.lang.reflect.Method.invoke(Method.java:483)"
 at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)"
 at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)"
 at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)"
 at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)"
[INFO] ------------------------------------------------------------------------"
[INFO] BUILD FAILURE"
[INFO] ------------------------------------------------------------------------"
[INFO] Total time: 54.780 s"
[INFO] Finished at: 2016-12-15T13:58:26+01:00"
[INFO] Final Memory: 56M/814M"
[INFO] ------------------------------------------------------------------------"
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.19.0-SNAPSHOT:run (default-cli) on project camel-example-transformer-blueprint: null: MojoExecutionException: InvocationTargetException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"" -> [Help 1]------Grzegorz Grzybek added a comment - 15/Dec/16 20:58 - edited"
See my comments in CAMEL-10476."
I'm guessing (I wasn't here when it was designed) that camel:run should work after mvn clean compile - when you have nice target/classes filled with compiled java sources and processed resources - just like it was (probably) designed."
And it may work with spring or CDI: because they're quite independent on what's contained in MANIFEST.MF."
Blueprint is different (OSGi is different - but it's another topic) because MANIFEST.MF is crucial - that's how felix-connect (formerly known as PojoSR) finds bundles - a bundle is just classpath element that contains MANIFEST.MF."
In camel-archetype-blueprint we use:"
      <!-- to generate the MANIFEST.MF of the bundle -->"
      <plugin>"
        <groupId>org.apache.felix</groupId>"
        <artifactId>maven-bundle-plugin</artifactId>"
        <version>3.2.0</version>"
        <extensions>false</extensions>"
        <executions>"
          <execution>"
            <id>bundle-manifest</id>"
            <phase>prepare-package</phase>"
            <goals>"
              <goal>manifest</goal>"
            </goals>"
          </execution>"
        </executions>"
      </plugin>"
to generate manifest in ... prepare-package phase."
So minimal command that succeeds is mvn clean prepare-package camel:run."
There are two uses of CamelBlueprintHelper.createBundleContext():"
a JUnit @Test that extends org.apache.camel.test.blueprint.CamelBlueprintTestSupport"
a mvn camel:run invocation (org.apache.camel.maven.RunMojo) configured with <useBlueprint> (or when blueprint descriptor is autodetected)"
These two cases call CamelBlueprintHelper.createBundleContext() with includeTestBundle flag:"
org.apache.camel.test.blueprint.CamelBlueprintTestSupport#includeTestBundle() by default (no Camel test overrides it) returns true"
RunMojo calls (blueprint case) org.apache.camel.test.blueprint.Main.main() with some arguments - but no argument changes org.apache.camel.test.blueprint.Main#includeSelfAsBundle field which is always false"
So for JUnit test we have includeTestBundle==true which means Tinybundles will be used to pack our test classes and add it to mini-registry (felix-connect)"
For camel:run we have includeTestBundle==false which means we have to find a bundle with blueprint descriptor describing our context differently - mvn prepare-package is enough."
There are of course quirks - if you do mvn clean package and then mvn test (without clean) we may end up with two bundles having the same blueprint descriptor. That's another (more annoying actually) incarnation of mvn clean compile camel:run problem where we have no bundles with blueprint descriptors."
My view is - current state is ok: as unit tests (that's what camel-test-blueprint was for) run before packaging - we're testing any blueprint descriptor - possibly one from src/main/resources (main route) and maybe some mocks from src/test/resources."
But with camel:run we're actually running the main route/context of the artifact: so we need at least it's MANIFEST.MF."
What do you think?------Aurelien Pupier added a comment - 16/Dec/16 08:01"
1) this is a regression: so whatever was the issue: this can't be ok anyway (but if there are workarounds they are welcome)"
2) I tried to simplify here: but I reproduce the issue even when calling ""clean package org.apache.camel:camel-maven-plugin:run"" which is what we were already doing by default"
3) this is another issue that should be addressed that a prepare-package need to be called before the camel:run (but with less priority)"
4) seems that you spotted other issues with combination of mvn clean package and mvn clean --> should be addressed also but it also a far lower priority------Claus Ibsen added a comment - 16/Dec/16 08:15"
Ah yeah they changed how the project is built for 2.18 onwards due the older 2.x maven-bundle-plugin was not supporting Java 8. And to upgrade to maven-bundle-plugin 3.x several things changed how it does that: including how that manifest stuff is generated etc. We could maybe tie camel:run to prepare-package phase or something so its run prior or something.------Claus Ibsen added a comment - 16/Dec/16 08:58"
Okay got it working if I change the phase to prepare-package: but then it runs the unit tests first"
* @execute phase=""prepare-package""------Grzegorz Grzybek added a comment - 16/Dec/16 08:59"
I'll check how maven-bundle-plugin affected the build."
+1 to camel:run (at least in useBlueprint=true) tied to prepare-package (just like maven-bundle-plugin:manifest goal)------Grzegorz Grzybek added a comment - 16/Dec/16 09:00"
but then it runs the unit tests first"
IMO that's good and as-designed. camel:run may be used any time - with or without tests. so ordinary -DskipTests could be used.------Claus Ibsen added a comment - 16/Dec/16 09:01"
The unit tests can be skipped with"
mvn camel:run -Dmaven.test.skip=true"
Which is something tooling etc can control: but I would like to see if we can do this by default in mvn camel:run------Grzegorz Grzybek added a comment - 16/Dec/16 09:01"
I'm checking now what's the reason of:"
[INFO] Starting Camel ..."
[ERROR] *************************************"
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main"
[ERROR] "
java.lang.reflect.InvocationTargetException"
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)"
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)"
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)"
 at java.lang.reflect.Method.invoke(Method.java:498)"
 at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:472)"
 at java.lang.Thread.run(Thread.java:745)"
Caused by: java.lang.NoClassDefFoundError: org/osgi/framework/InvalidSyntaxException"
 at org.apache.camel.test.blueprint.Main.createBundleContext(Main.java:151)"
 at org.apache.camel.test.blueprint.Main.createBundleContext(Main.java:147)"
 at org.apache.camel.test.blueprint.Main.doStart(Main.java:107)"
 at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)"
 at org.apache.camel.main.MainSupport.run(MainSupport.java:138)"
 at org.apache.camel.main.MainSupport.run(MainSupport.java:390)"
 at org.apache.camel.test.blueprint.Main.main(Main.java:82)"
 ... 6 more"
Caused by: java.lang.ClassNotFoundException: org.osgi.framework.InvalidSyntaxException"
 at java.net.URLClassLoader.findClass(URLClassLoader.java:381)"
 at java.lang.ClassLoader.loadClass(ClassLoader.java:424)"
 at java.lang.ClassLoader.loadClass(ClassLoader.java:357)"
 ... 13 more"
when doing (yesterday it worked) mvn clean compile camel:run.------Claus Ibsen added a comment - 16/Dec/16 09:21"
Thanks for the diving into this."
I have pushed fixes to master and 2.18.x branches.------Aurelien Pupier added a comment - 16/Dec/16 09:55"
I don't understand why changing the phase tie for camel:run is fixing the issue as when calling ""clean package org.apache.camel:camel-maven-plugin:run"" I reproduce the issue."
Seems a good thing to fix it anyway. It is fixing the point ""4) seems that you spotted other issues with combination of mvn clean package and mvn clean --> should be addressed also but it also a far lower priority"" that I mentioned before."
Unfortunately: I don't understand why it is fixing the initial issue.------Aurelien Pupier added a comment - 16/Dec/16 10:50"
I confirm that the initial issue is still present. I tried with the 2.18.2-SNAPSHOT which contains Claus' commit.------Claus Ibsen added a comment - 16/Dec/16 11:45"
2.18.2-SNAPSHOT works for me"
davsclaus:/Users/davsclaus/Documents/workspace/blue/$ mvn camel:run -Dmaven.test.skip=true"
[INFO] Scanning for projects..."
[INFO]"
[INFO] ------------------------------------------------------------------------"
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT"
[INFO] ------------------------------------------------------------------------"
[INFO]"
[INFO] >>> camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) > prepare-package @ blue >>>"
[INFO]"
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ blue ---"
[INFO] Using 'UTF-8' encoding to copy filtered resources."
[INFO] Copying 2 resources"
[INFO]"
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ blue ---"
[INFO] Nothing to compile - all classes are up to date"
[INFO]"
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ blue ---"
[INFO] Not copying test resources"
[INFO]"
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ blue ---"
[INFO] Not compiling test sources"
[INFO]"
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ blue ---"
[INFO] Tests are skipped."
[INFO]"
[INFO] --- maven-bundle-plugin:3.2.0:manifest (bundle-manifest) @ blue ---"
[INFO]"
[INFO] <<< camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) < prepare-package @ blue <<<"
[INFO]"
[INFO] --- camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) @ blue ---"
[INFO] camel-blueprint detected on classpath"
[INFO] OSGi Blueprint XML files detected in directory /Users/davsclaus/Documents/workspace/blue/src/main/resources/OSGI-INF/blueprint"
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext"
[INFO] Starting Camel ..."
Dec 16: 2016 12:44:33 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run"
INFO: Copy thread finished."
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting"
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started"
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting"
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started"
[         Blueprint Extender: 1] BlueprintContainerImpl         INFO  Bundle com.foo.blue/1.0.0.SNAPSHOT is waiting for namespace handlers [http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0: http://camel.apache.org/schema/blueprint]"
[         Blueprint Extender: 3] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is starting"
[         Blueprint Extender: 3] ManagedManagementStrategy      INFO  JMX is enabled"
[         Blueprint Extender: 3] DefaultRuntimeEndpointRegistry INFO  Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)"
[         Blueprint Extender: 3] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html"
[         Blueprint Extender: 3] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: timer://foo?period=5000"
[         Blueprint Extender: 3] BlueprintCamelContext          INFO  Total 1 routes: of which 1 are started."
[         Blueprint Extender: 3] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) started in 0.450 seconds"
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hi from Camel at 2016-12-16 12:44:37"
^C[                      Thread-1] MainSupport$HangupInterceptor  INFO  Received hang up - stopping the main instance."
davsclaus:/Users/davsclaus/Documents/workspace/blue/$------Aurelien Pupier added a comment - 16/Dec/16 11:55"
failing for me skipping test or not"
C:\Users\Aurelien Pupier\test>mvn camel:run -Dmaven.test.skip=true"
[INFO] Scanning for projects..."
[INFO]"
[INFO] ------------------------------------------------------------------------"
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT"
[INFO] ------------------------------------------------------------------------"
[INFO]"
[INFO] >>> camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) > prepare-package @ test >>>"
[INFO]"
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ test ---"
[INFO] Using 'UTF-8' encoding to copy filtered resources."
[INFO] Copying 2 resources"
[INFO]"
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ test ---"
[INFO] Nothing to compile - all classes are up to date"
[INFO]"
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ test ---"
[INFO] Not copying test resources"
[INFO]"
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ test ---"
[INFO] Not compiling test sources"
[INFO]"
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ test ---"
[INFO] Tests are skipped."
[INFO]"
[INFO] --- maven-bundle-plugin:3.2.0:manifest (bundle-manifest) @ test ---"
[INFO]"
[INFO] <<< camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) < prepare-package @ test <<<"
[INFO]"
[INFO] --- camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) @ test ---"
[INFO] camel-blueprint detected on classpath"
[INFO] OSGi Blueprint XML files detected in directory C:\Users\Aurelien Pupier\test\src\main\resources\OSGI-INF\blueprint"
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext"
[INFO] Starting Camel ..."
SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder""."
SLF4J: Defaulting to no-operation (NOP) logger implementation"
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details."
Dec 16: 2016 12:54:19 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run"
INFO: Copy thread finished."
                                                                                                                                                                                                                                                                                                                                                                                                                                       [ERROR] *************************************"
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main"
[ERROR]"
java.lang.reflect.InvocationTargetException"
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)"
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)"
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)"
        at java.lang.reflect.Method.invoke(Method.java:497)"
        at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:479)"
        at java.lang.Thread.run(Thread.java:745)"
Caused by: java.lang.RuntimeException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"""
        at org.apache.camel.test.blueprint.CamelBlueprintHelper.waitForBlueprintContainer(CamelBlueprintHelper.java:363)"
        at org.apache.camel.test.blueprint.Main.doStart(Main.java:111)"
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)"
        at org.apache.camel.main.MainSupport.run(MainSupport.java:138)"
        at org.apache.camel.main.MainSupport.run(MainSupport.java:390)"
        at org.apache.camel.test.blueprint.Main.main(Main.java:82)"
        ... 6 more"
[ERROR] *************************************"
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-1:5:org.apache.camel.test.blueprint.Main] was interrupted but is still alive after waiting at least 15000msecs"
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-1:5:org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption"
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-2:5:org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption"
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-3:5:org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption"
[WARNING] NOTE: 3 thread(s) did not finish despite being asked to  via interruption. This is not a problem with exec:java: it is a problem with the running code. Although not serious: it should be remedied."
[WARNING] Couldn't destroy threadgroup org.apache.camel.maven.RunMojo$IsolatedThreadGroup[name=org.apache.camel.test.blueprint.Main:maxpri=10]"
java.lang.IllegalThreadStateException"
        at java.lang.ThreadGroup.destroy(ThreadGroup.java:778)"
        at org.apache.camel.maven.RunMojo.execute(RunMojo.java:512)"
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)"
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)"
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)"
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)"
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)"
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)"
        at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)"
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)"
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)"
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)"
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)"
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)"
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)"
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)"
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)"
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)"
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)"
        at java.lang.reflect.Method.invoke(Method.java:497)"
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)"
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)"
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)"
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)"
[INFO] ------------------------------------------------------------------------"
[INFO] BUILD FAILURE"
[INFO] ------------------------------------------------------------------------"
[INFO] Total time: 48.642 s"
[INFO] Finished at: 2016-12-16T12:55:04+01:00"
[INFO] Final Memory: 37M/516M"
[INFO] ------------------------------------------------------------------------"
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) on project test: null: MojoExecutionException: InvocationTargetException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"" -> [Help 1]"
[ERROR]"
[ERROR] To see the full stack trace of the errors: re-run Maven with the -e switch."
[ERROR] Re-run Maven using the -X switch to enable full debug logging."
[ERROR]"
[ERROR] For more information about the errors and possible solutions: please read the following articles:"
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException"
C:\Users\Aurelien Pupier\test>mvn camel:run"
[INFO] Scanning for projects..."
[INFO]"
[INFO] ------------------------------------------------------------------------"
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT"
[INFO] ------------------------------------------------------------------------"
[INFO]"
[INFO] >>> camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) > prepare-package @ test >>>"
[INFO]"
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ test ---"
[INFO] Using 'UTF-8' encoding to copy filtered resources."
[INFO] Copying 2 resources"
[INFO]"
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ test ---"
[INFO] Changes detected - recompiling the module!"
[INFO] Compiling 2 source files to C:\Users\Aurelien Pupier\test\target\classes"
[INFO]"
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ test ---"
[INFO] Using 'UTF-8' encoding to copy filtered resources."
[INFO] Copying 1 resource"
[INFO]"
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ test ---"
[INFO] Changes detected - recompiling the module!"
[INFO] Compiling 3 source files to C:\Users\Aurelien Pupier\test\target\test-classes"
[INFO] /C:/Users/Aurelien Pupier/test/src/test/java/test/BlueprintBeanPropertiesOverrideFromTestRouteTest.java: C:\Users\Aurelien Pupier\test\src\test\java\test\BlueprintBeanPropertiesOverrideFromTestRouteTest.java uses unchecked or unsafe operations."
[INFO] /C:/Users/Aurelien Pupier/test/src/test/java/test/BlueprintBeanPropertiesOverrideFromTestRouteTest.java: Recompile with -Xlint:unchecked for details."
[INFO]"
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ test ---"
[INFO] Surefire report directory: C:\Users\Aurelien Pupier\test\target\surefire-reports"
"
-------------------------------------------------------"
 T E S T S"
-------------------------------------------------------"
Running test.BlueprintBeanPropertiesOverrideFromFileRouteTest"
[                          main] CamelBlueprintHelper           INFO  Using Blueprint XML file: /C:/Users/Aurelien%20Pupier/test/target/classes/OSGI-INF/blueprint/blueprint-bean.xml"
Dec 16: 2016 12:52:02 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run"
INFO: Copy thread finished."
Dec 16: 2016 12:52:02 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run"
INFO: Copy thread finished."
[                          main] Activator                      INFO  Camel activator starting"
[                          main] Activator                      INFO  Camel activator started"
[                          main] Activator                      INFO  Camel activator starting"
[                          main] Activator                      INFO  Camel activator started"
[                          main] CamelBlueprintHelper           INFO  Updating ConfigAdmin Configuration PID=HelloBean: factoryPID=null: bundleLocation=null by overriding properties {greeting=Hello from file}"
[         Blueprint Extender: 1] BlueprintContainerImpl         INFO  Bundle BlueprintBeanPropertiesOverrideFromFileRouteTest/1.0.0 is waiting for namespace handlers [http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0: http://camel.apache.org/schema/blueprint]"
[                          main] rtiesOverrideFromFileRouteTest INFO  ********************************************************************************"
[                          main] rtiesOverrideFromFileRouteTest INFO  Testing: testRoute(test.BlueprintBeanPropertiesOverrideFromFileRouteTest)"
[                          main] rtiesOverrideFromFileRouteTest INFO  ********************************************************************************"
[                          main] rtiesOverrideFromFileRouteTest INFO  Skipping starting CamelContext as system property skipStartingCamelContext is set to be true."
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is starting"
[                          main] ManagedManagementStrategy      INFO  JMX is enabled"
[                          main] DefaultRuntimeEndpointRegistry INFO  Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)"
[                          main] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html"
[                          main] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: timer://foo?period=5000"
[                          main] BlueprintCamelContext          INFO  Total 1 routes: of which 1 are started."
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) started in 0.239 seconds"
[                          main] MockEndpoint                   INFO  Asserting: mock://result is satisfied"
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hello from file at 2016-12-16 12:52:05"
[                          main] rtiesOverrideFromFileRouteTest INFO  ********************************************************************************"
[                          main] rtiesOverrideFromFileRouteTest INFO  Testing done: testRoute(test.BlueprintBeanPropertiesOverrideFromFileRouteTest)"
[                          main] rtiesOverrideFromFileRouteTest INFO  Took: 1.252 seconds (1252 millis)"
[                          main] rtiesOverrideFromFileRouteTest INFO  ********************************************************************************"
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutting down"
[                          main] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 10 seconds)"
[text) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: timerToLog shutdown complete: was consuming from: timer://foo?period=5000"
[                          main] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds"
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) uptime 1.272 seconds"
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutdown in 0.017 seconds"
Tests run: 1: Failures: 0: Errors: 0: Skipped: 0: Time elapsed: 3.309 sec"
Running test.BlueprintBeanPropertiesOverrideFromTestRouteTest"
Dec 16: 2016 12:52:05 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run"
INFO: Copy thread finished."
Dec 16: 2016 12:52:05 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run"
INFO: Copy thread finished."
[                          main] rtiesOverrideFromTestRouteTest INFO  Updating ConfigAdmin Configuration PID=HelloBean: factoryPID=null: bundleLocation=null by overriding properties {greeting=Hello from test}"
[                     Thread-10] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutting down"
[                     Thread-10] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) uptime"
[                     Thread-10] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutdown in 0.001 seconds"
[                          main] rtiesOverrideFromTestRouteTest INFO  ********************************************************************************"
[                          main] rtiesOverrideFromTestRouteTest INFO  Testing: testRoute(test.BlueprintBeanPropertiesOverrideFromTestRouteTest)"
[                          main] rtiesOverrideFromTestRouteTest INFO  ********************************************************************************"
[                          main] rtiesOverrideFromTestRouteTest INFO  Skipping starting CamelContext as system property skipStartingCamelContext is set to be true."
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is starting"
[                          main] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html"
[                          main] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: timer://foo?period=5000"
[                          main] BlueprintCamelContext          INFO  Total 1 routes: of which 1 are started."
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) started in 0.021 seconds"
[ntext) thread #2 - timer://foo] timerToLog                     INFO  The message contains Hello from test at 2016-12-16 12:52:06"
[                          main] rtiesOverrideFromTestRouteTest INFO  ********************************************************************************"
[                          main] rtiesOverrideFromTestRouteTest INFO  Testing done: testRoute(test.BlueprintBeanPropertiesOverrideFromTestRouteTest)"
[                          main] rtiesOverrideFromTestRouteTest INFO  Took: 1.022 seconds (1022 millis)"
[                          main] rtiesOverrideFromTestRouteTest INFO  ********************************************************************************"
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutting down"
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) uptime 1.024 seconds"
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutdown in 0.002 seconds"
Tests run: 1: Failures: 0: Errors: 0: Skipped: 0: Time elapsed: 2.189 sec"
Running test.BlueprintBeanRouteTest"
Dec 16: 2016 12:52:07 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run"
INFO: Copy thread finished."
Dec 16: 2016 12:52:07 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run"
INFO: Copy thread finished."
[                          main] BlueprintBeanRouteTest         INFO  ********************************************************************************"
[                          main] BlueprintBeanRouteTest         INFO  Testing: testRoute(test.BlueprintBeanRouteTest)"
[                          main] BlueprintBeanRouteTest         INFO  ********************************************************************************"
[                          main] BlueprintBeanRouteTest         INFO  Skipping starting CamelContext as system property skipStartingCamelContext is set to be true."
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is starting"
[                          main] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html"
[                          main] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: timer://foo?period=5000"
[                          main] BlueprintCamelContext          INFO  Total 1 routes: of which 1 are started."
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) started in 0.032 seconds"
[ntext) thread #4 - timer://foo] timerToLog                     INFO  The message contains Hi from Camel at 2016-12-16 12:52:08"
[                          main] BlueprintBeanRouteTest         INFO  ********************************************************************************"
[                          main] BlueprintBeanRouteTest         INFO  Testing done: testRoute(test.BlueprintBeanRouteTest)"
[                          main] BlueprintBeanRouteTest         INFO  Took: 1.033 seconds (1033 millis)"
[                          main] BlueprintBeanRouteTest         INFO  ********************************************************************************"
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutting down"
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) uptime 1.036 seconds"
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutdown in 0.003 seconds"
Tests run: 1: Failures: 0: Errors: 0: Skipped: 0: Time elapsed: 2.165 sec"
"
Results :"
"
Tests run: 3: Failures: 0: Errors: 0: Skipped: 0"
"
[INFO]"
[INFO] --- maven-bundle-plugin:3.2.0:manifest (bundle-manifest) @ test ---"
[INFO]"
[INFO] <<< camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) < prepare-package @ test <<<"
[INFO]"
[INFO] --- camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) @ test ---"
[INFO] You can skip tests from the command line using: mvn camel:run -Dmaven.test.skip=true"
[INFO] camel-blueprint detected on classpath"
[INFO] OSGi Blueprint XML files detected in directory C:\Users\Aurelien Pupier\test\src\main\resources\OSGI-INF\blueprint"
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext"
[INFO] Starting Camel ..."
SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder""."
SLF4J: Defaulting to no-operation (NOP) logger implementation"
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details."
Dec 16: 2016 12:52:11 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run"
INFO: Copy thread finished."
[ERROR] *************************************"
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main"
[ERROR]"
java.lang.reflect.InvocationTargetException"
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)"
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)"
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)"
        at java.lang.reflect.Method.invoke(Method.java:497)"
        at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:479)"
        at java.lang.Thread.run(Thread.java:745)"
Caused by: java.lang.RuntimeException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"""
        at org.apache.camel.test.blueprint.CamelBlueprintHelper.waitForBlueprintContainer(CamelBlueprintHelper.java:363)"
        at org.apache.camel.test.blueprint.Main.doStart(Main.java:111)"
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)"
        at org.apache.camel.main.MainSupport.run(MainSupport.java:138)"
        at org.apache.camel.main.MainSupport.run(MainSupport.java:390)"
        at org.apache.camel.test.blueprint.Main.main(Main.java:82)"
        ... 6 more"
[ERROR] *************************************"
                                                                           [WARNING] thread Thread[ForkJoinPool.commonPool-worker-1:5:org.apache.camel.test.blueprint.Main] was interrupted but is still alive after waiting at least 15000msecs"
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-1:5:org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption"
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-2:5:org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption"
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-4:5:org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption"
[WARNING] NOTE: 3 thread(s) did not finish despite being asked to  via interruption. This is not a problem with exec:java: it is a problem with the running code. Although not serious: it should be remedied."
[WARNING] Couldn't destroy threadgroup org.apache.camel.maven.RunMojo$IsolatedThreadGroup[name=org.apache.camel.test.blueprint.Main:maxpri=10]"
java.lang.IllegalThreadStateException"
        at java.lang.ThreadGroup.destroy(ThreadGroup.java:778)"
        at org.apache.camel.maven.RunMojo.execute(RunMojo.java:512)"
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)"
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)"
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)"
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)"
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)"
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)"
        at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)"
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)"
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)"
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)"
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)"
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)"
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)"
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)"
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)"
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)"
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)"
        at java.lang.reflect.Method.invoke(Method.java:497)"
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)"
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)"
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)"
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)"
[INFO] ------------------------------------------------------------------------"
[INFO] BUILD FAILURE"
[INFO] ------------------------------------------------------------------------"
[INFO] Total time: 58.326 s"
[INFO] Finished at: 2016-12-16T12:52:57+01:00"
[INFO] Final Memory: 51M/549M"
[INFO] ------------------------------------------------------------------------"
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) on project test: null: MojoExecutionException: InvocationTargetException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"" -> [Help 1]"
[ERROR]"
[ERROR] To see the full stack trace of the errors: re-run Maven with the -e switch."
[ERROR] Re-run Maven using the -X switch to enable full debug logging."
[ERROR]"
[ERROR] For more information about the errors and possible solutions: please read the following articles:"
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException------Grzegorz Grzybek added a comment - 16/Dec/16 13:00"
One more fix:"
master: https://github.com/apache/camel/commit/ddcbd0f948d0f4b8c2a4a5b99f78f2880c4d21de"
camel-2.18.x: https://github.com/apache/camel/commit/74fd151016b0cc64e6eddd098bf355fc35743ce0------Aurelien Pupier added a comment - 16/Dec/16 14:33"
yeah it works: thank you!------
 
Bug,RESOLVED,Major,Fixed,2.18.1,2.18.2: 2.19.0,camel-ahc,Claus Ibsen,Thomas Günter,Using a ahc URI including the realm parameter leads into an unknown parameter exception:"
""ahc:http://www.yahoo.com?clientConfig.realm.principal=testPrincipal&clientConfig.realm.password=testPassword&clientConfig.realm.scheme=BASIC"""
Causes Exception:"
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: ahc://http://www.google.com?clientConfig.realm.principal=testPrincipal due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=["
{realm.principal=testPrincipal}"
]"
Suggestion for org.apache.camel.component.ahc.AhcComponent:"
Line #44:"
private static final String CLIENT_REALM_CONFIG_PREFIX = ""clientConfig.realm."";"
Line #94ff:"
Map<String: Object> realmParams = IntrospectionSupport.extractProperties(parameters: CLIENT_REALM_CONFIG_PREFIX);"
realmBuilder = new Realm.Builder(realmParams.get(""principal"").toString(): realmParams.get(""password"").toString());"
realmParams.remove(""principal"");"
realmParams.remove(""password"");"
setProperties(realmBuilder: realmParams);"
validateParameters(uri: realmParams: null);,Comments------Claus Ibsen added a comment - 15/Dec/16 16:13"
Thanks for the patch------
 
Improvement,RESOLVED,Minor,Fixed,None,2.16.5: 2.17.5: (2)"
:,camel-jacksonxml,Andrea Cosentino,Andrea Cosentino,By default the option will be false,Comments------
 
Task,RESOLVED,Minor,Fixed,None,2.18.2,documentation,Claus Ibsen,Claus Ibsen,We should add the camel-tarfile as wiki doc for the data formats: as we currently only have it as .adoc."
https://github.com/apache/camel/blob/master/components/camel-tarfile/src/main/docs/tarfile-dataformat.adoc,Comments------Claus Ibsen added a comment - 15/Dec/16 15:27"
http://camel.apache.org/tar-dataformat.html------
 
Improvement,RESOLVED,Major,Fixed,None,2.17.5: 2.18.2: 2.19.0,camel-quartz2,James Netherton,James Netherton,Currently the quartz2 endpoint implements isSingleton() and returns false."
This causes issues if you try to do something like:"
camelContext.getEndpoint(""quartz2://foo?cron=5+*+*+*+*"")"
Which can trigger the endpoint start() method to be called and results in:"
Caused by: java.lang.IllegalArgumentException: Trigger key myGroup.longPeriodTimer is already in use by quartz2://foo/longPeriodTimer?cron=5+*+*+*+*"
 at org.apache.camel.component.quartz2.QuartzEndpoint.ensureNoDupTriggerKey(QuartzEndpoint.java:446)"
 at org.apache.camel.component.quartz2.QuartzEndpoint.addJobInScheduler(QuartzEndpoint.java:380)"
 at org.apache.camel.component.quartz2.QuartzEndpoint.doStart(QuartzEndpoint.java:340)"
The quartz1 endpoint implements isSingleton to return true. I see no reason why quartz2 should be any different.,Comments------ASF GitHub Bot added a comment - 15/Dec/16 16:20"
GitHub user jamesnetherton opened a pull request:"
https://github.com/apache/camel/pull/1350"
CAMEL-10606: Change quartz2 endpoint to be a singleton"
You can merge this pull request into a Git repository by running:"
$ git pull https://github.com/jamesnetherton/camel CAMEL-10606"
Alternatively you can review and apply these changes as the patch at:"
https://github.com/apache/camel/pull/1350.patch"
To close this pull request: make a commit to your master/trunk branch"
with (at least) the following in the commit message:"
This closes #1350"
commit 6cea29e0b46e5e4d0b329ee62465cea431cacfca"
Author: James Netherton <jamesnetherton@gmail.com>"
Date: 2016-12-15T16:15:50Z"
CAMEL-10606: Change quartz2 endpoint to be a singleton------ASF GitHub Bot added a comment - 15/Dec/16 16:56"
Github user jamesnetherton closed the pull request at:"
https://github.com/apache/camel/pull/1350------
 
Improvement,RESOLVED,Minor,Fixed,None,2.19.0,camel-cxf,Claus Ibsen,Claus Ibsen,See SO"
http://stackoverflow.com/questions/41164377/calling-no-params-webservice-operation-from-camel-route-using-cxf"
We could detect that it expect 0 parameters and then don't do any parameter mappings so the service can be easily called.,Comments------ASF GitHub Bot added a comment - 07/Feb/17 21:12"
GitHub user anoordover opened a pull request:"
https://github.com/apache/camel/pull/1451"
CAMEL-10607"
I think getParams should return empty array when body is null."
This solves https://issues.apache.org/jira/browse/CAMEL-10607"
You can merge this pull request into a Git repository by running:"
$ git pull https://github.com/anoordover/camel CAMEL-10607"
Alternatively you can review and apply these changes as the patch at:"
https://github.com/apache/camel/pull/1451.patch"
To close this pull request: make a commit to your master/trunk branch"
with (at least) the following in the commit message:"
This closes #1451------Claus Ibsen added a comment - 08/Feb/17 08:34"
Thanks for the PR------ASF GitHub Bot added a comment - 08/Feb/17 08:34"
Github user asfgit closed the pull request at:"
https://github.com/apache/camel/pull/1451------
 
New Feature,RESOLVED,Major,Fixed,None,2.19.0,karaf,John Poth,John Poth,Provide an option/way to list all endpoints in all camel-contexts.,Comments------Claus Ibsen added a comment - 15/Dec/16 19:23"
Contributions is welcome"
http://camel.apache.org/contributing"
Yeah maybe if the parameter is empty or * it matches using that wildcard: eg it would be nice to match: eg foo* to match all camel context that starts with the name foo. I think we have some support for that in some of the other commands. So peak around in the source and see.------ASF GitHub Bot added a comment - 16/Dec/16 15:26"
GitHub user johnpoth opened a pull request:"
https://github.com/apache/camel/pull/1355"
CAMEL-10608 Karaf endpoint-list command to support wildcard expressions"
https://issues.apache.org/jira/browse/CAMEL-10608"
You can merge this pull request into a Git repository by running:"
$ git pull https://github.com/johnpoth/camel CAMEL-10608"
Alternatively you can review and apply these changes as the patch at:"
https://github.com/apache/camel/pull/1355.patch"
To close this pull request: make a commit to your master/trunk branch"
with (at least) the following in the commit message:"
This closes #1355------ASF GitHub Bot added a comment - 19/Dec/16 09:13"
Github user johnpoth closed the pull request at:"
https://github.com/apache/camel/pull/1355------
 
New Feature,RESOLVED,Major,Fixed,None,2.19.0,camel-core,Claus Ibsen,Claus Ibsen,To make it easier to skip N items when splitting or something.,Comments------
 
Improvement,RESOLVED,Minor,Invalid,2.18.1,None,camel-scala,Unassigned,Aurelien Pupier,[WARNING] C:\git\camel\components\camel-scala\src\main\scala\org\apache\camel\scala\dsl\SAbstractDefinition.scala:82: warning: method inOnly in class ProcessorDefinition is deprecated: see corresponding Javadoc for more information."
[WARNING]   def inOnly = wrap(target.inOnly)"
[WARNING]                            ^"
[WARNING] C:\git\camel\components\camel-scala\src\main\scala\org\apache\camel\scala\dsl\SAbstractDefinition.scala:84: warning: method inOut in class ProcessorDefinition is deprecated: see corresponding Javadoc for more information."
[WARNING]   def inOut = wrap(target.inOut)"
[WARNING]                           ^"
[WARNING] C:\git\camel\components\camel-scala\src\main\scala\org\apache\camel\scala\dsl\SAbstractDefinition.scala:131: warning: method routingSlip in class ProcessorDefinition is deprecated: see corresponding Javadoc for more information."
[WARNING]   def routingSlip(header: String) = wrap(target.routingSlip(header))"
[WARNING]                                                 ^"
[WARNING] C:\git\camel\components\camel-scala\src\main\scala\org\apache\camel\scala\dsl\SAbstractDefinition.scala:133: warning: method routingSlip in class ProcessorDefinition is deprecated: see corresponding Javadoc for more information."
[WARNING]   def routingSlip(header: String: separator: String) = wrap(target.routingSlip(header: separator))"
[WARNING]                                                                    ^"
[WARNING] C:\git\camel\components\camel-scala\src\main\scala\org\apache\camel\scala\dsl\SAggregateDefinition.scala:56: warning: method groupExchanges in class AggregateDefinition is deprecated: see corresponding Javadoc for more information."
[WARNING]   def groupExchanges = wrap(target.groupExchanges)"
[WARNING]                                    ^"
[WARNING] C:\git\camel\components\camel-scala\src\main\scala\org\apache\camel\scala\RichMessage.scala:42: warning: method createExchangeId in trait Message is deprecated: see corresponding Javadoc for more information."
[WARNING]   def createExchangeId = message.createExchangeId"
[WARNING]                                  ^"
[WARNING] warning: there were 18 feature warnings; re-run with -feature for details"
[WARNING] 7 warnings found,Comments------Claus Ibsen added a comment - 16/Dec/16 10:53"
They are there because its a 1:1 with camel-core and the methods are deprecated there------Aurelien Pupier added a comment - 16/Dec/16 10:55"
ok: understood: thanks for the explanation.------
 
Improvement,RESOLVED,Major,Fixed,None,2.18.3: 2.19.0,camel-blueprint,Grzegorz Grzybek,Grzegorz Grzybek,Just like with CXF-7183: we need analogous relation at NamespaceHandler level - just like a relation between XSDs."
camel-cxf and camel-cxf-transport related NamespaceHandlers load XSD schemas that import CXF schemas - the namespace handlers themselves have to do it as well.,Comments------Claus Ibsen added a comment - 16/Dec/16 19:34"
Is this change backwards compatible?"
We need to be sure Camel 2.18.x at least runs just as before on existing Karaf versions with older blueprint-core that comes pre-installed.------Grzegorz Grzybek added a comment - 19/Dec/16 10:00"
I'll of course check it: but the change should be transparent when running on earlier blueprint-core versions. The added code is used when blueprint-core's NamespaceHandlerRegistryImpl asks handler to provide URI for namespace - this doesn't happen before blueprint-core 1.6.x.------Grzegorz Grzybek added a comment - 24/Feb/17 08:20"
Fixed in 2.19.x: https://github.com/apache/camel/commit/e8976d1384dea61ebaeaf93911ef34d81e69a938"
Fixed in 2.18.x: https://github.com/apache/camel/commit/4d936e3a22855af88d55a244427a3fd37d892171------
 
New Feature,RESOLVED,Major,Done,None,2.19.0,None,Nicola Ferraro,Nicola Ferraro,We have a component for rx-java v1. rx-java v2 now is out and compatible with the reactive-stream specs: like many other reactive frameworks (including vert.x). We may want to implement a new component to integrate with any framework that comply with the reactive-streams specs (Akka-Streams and Slick among the others).,Comments------Claus Ibsen added a comment - 22/Dec/16 08:11"
Sounds good Nicola: wonder if you have time to work on this so we can potentially have this in the next 2.19 release?------Nicola Ferraro added a comment - 22/Dec/16 08:48 - edited"
Yeah: I can work on it. I'm evaluating some options:"
1. We can upgrade rx-java to v.2 and expose the new rx-java api plus the reactive streams api through the camel-rx component. In this case the implementation of Publisher and Subscriber will be backed by rx Observable and Observer."
2. We can create a module that is independent from rx and uses a simple implementation of the specs. I thought it was difficult to follow this path but a Camel Producer is more or less a reactive streams Publisher: while a Camel Consumer is equivalent to a Subscriber. I created a basic Publisher from a Camel Producer: adding a pool of worker threads for pushing data downstream: and it was easy to pass the reactive streams TCK for active publishers. So this can be done easily."
What I don't like about the current camel-rx module is that it is non-standard. It adds support for rx but it does not contain a component."
The suggested way of using it is like:"
ReactiveCamel rx = new ReactiveCamel(camelContext);"
Observable<Message> observable = rx.toObservable(""activemq:MyMessages"");"
The way a component should work (my opinion) is:"
// builder"
from(""activemq:MyMessages"")"
.transform().xxx().yyy()"
.to(""reactive-streams:incoming"");"
"
// Rx-java: Akka streams: ... "
Publisher pub = CamelStreams.get(context).getPublisher(""incoming"");"
// subscribe and do anything with the publisher"
I know you probably can use this latter pattern with the current camel-rx impl by creating an Observable from a ""direct:xxx"" endpoint: but it's a bit odd."
Maybe I'm missing some pieces. Thoughts?------Claus Ibsen added a comment - 22/Dec/16 09:06"
Yeah it would be great with a Camel component as well for this: then it's integrated well with any Camel routes."
And yeah your Client API seems good with the CamelStreams. I think we need both kinds: Camel component and the client API so people can work with the reactive API in Java code.------Luca Burgazzoli added a comment - 22/Dec/16 10:07"
Can we do both 1 and 2 and a mix ?"
I mean:"
if you only have camel-reactive-stream in the classpath --> use the custom implementation"
if you have camel-reactive-stream and camel-rx n the classpath --> use the rx implementation (maybe discover it via a service loader like impl: registry etc)"
However you should be able to choose the implementation i.e:"
ReactiveCamelStreams.get(context) --> would try to find an implementation and fallback to our internal impl"
RxCamelStreams.get(context) --> would return an rx implementation (available only if camel-rx is available)"
VertxCamelStreams.get(context) --> would return a vertx implementation (available only if camel-vertex is available)"
Make sense ?------Nicola Ferraro added a comment - 22/Dec/16 10:42"
It makes a lot of sense"
I'll need to investigate how they can be mixed together: but it seems the right direction.------Luca Burgazzoli added a comment - 22/Dec/16 10:54"
An interesting side effect of this is that in spring-boot you may have the underlying implementation auto configured so that you can change i.e. the thread pool size or any other aspect of the implementation without changing the camel-code------ASF GitHub Bot added a comment - 20/Jan/17 10:50"
GitHub user nicolaferraro opened a pull request:"
https://github.com/apache/camel/pull/1412"
CAMEL-10612: camel-reactive-streams"
I publish a preview of the reactive-stream component: asking for a review."
The purpose of the component is to allow Camel to exchange messages with any"
asynchronous stream processing system compatible with the reactive-streams specs"
(rx-java: akka-streams: vertx: ...: the list will grow)."
I've included in the component the reactive-streams TCK to ensure compliance with the specs."
All streams produced by Camel are open streams (otherwise called hot streams)."
basic usage"
From Camel to an external stream engine:"
```"
from(""timer:tick"")"
.setBody().header(Exchange.TIMER_COUNTER)"
.to(""reactive-streams:integers"");"
Publisher<Integer> integers = CamelReactiveStreams.get(context).getPublisher(""integers"": Integer.class)"
// use it eg. in rxjava2"
Observable.fromPublisher(integers)"
.map(...)"
.flatMap(...)"
.subscribe();"
```"
From an external engine to Camel:"
```"
from(""reactive-streams:numbers"")"
.to(""log:INFO"");"
Subscriber<Integer> numbers = CamelReactiveStreams.get(context).getSubscriber(""numbers"": Integer.class);"
// use it eg. in rxjava2"
Flowable.range(0: 40)"
.subscribe(numbers); // a stream with numbers from 0 to 39"
```"
Converting a Consumer into a Subscriber and a Producer into a Publisher has been straightforward."
The difficult part has been managing backpressure correctly. I left the door open for different implementations of the engine: but it may be not so easy to implement them because of the way backpressure should interact with Camel mechanisms."
Backpressure is a fundamental part of the specs and establishes mechanisms by which a Publisher"
can deal with slow Subscribers. Whithin a suscription: subscribers give constant feedbacks to the publishers indicating the number of items they are willing to receive (almost like TCP flow control window)."
Camel (afaik) has not direct support for this kind of flow control: but has similar concepts: like throttling and route policy."
So here's how implemented backpressure."
backpressure in producer"
(from Camel route to an external subscriber)"
Backpressure is handled by an internal buffer that caches exchanges before delivering them to the subscribers."
It is important to avoid a buffer overflow. Eg. a route like `from(""jms:xx"").to(""reactive-streams:pub"")` can cause easily a out-of-memory error if the queue contains a lot of messages (eg. after a shutdown)."
To avoid this kind of problems: both throttling and ThrottlingInflightRoutePolicy can be used."
Throttling (`from("".."").throttle()..`) just delays messages: so it cannot deal with idle/too-slow subscribers."
A `ThrottlingInflightRoutePolicy` is the preferred way to deal with slow subscribers. Exchanges are considered completed only when they are received by all subscribers: so users can set a maximum number of inflight exchanges in the policy then route suspension/resume will be controlled by backpressure: a slow subscriber will cause periodic route suspensions."
A snippet from the Junit test:"
```"
ThrottlingInflightRoutePolicy policy = new ThrottlingInflightRoutePolicy();"
policy.setMaxInflightExchanges(10);"
policy.setScope(ThrottlingInflightRoutePolicy.ThrottlingScope.Route);"
from(""timer:tick?period=50"")"
.routePolicy(policy)"
.to(""reactive-streams:pub"");"
```"
When a subscriber of the `pub` stream becomes idle: about 10 messages are accumulated in the internal buffer:"
then the route is suspended. When the subscriber starts processing the messages again: the route is resumed."
It works also with multiple subscribers (in practice: the slowest one controls the suspension/resume)."
The `ThrottlingInflightRoutePolicy` should (must) be used eg. when consuming from JMS."
In some circumstances (eg. http consumer): suspending the route is not the best approach: so it's better handling backpressure by just buffering (the default approach)."
backpressure in consumer"
(from an external publisher to a Camel route)"
When consuming items from a reactive-streams publisher: the maximum number of inflight exchanges can be set as endpoint option."
The subscriber associated with the consumer interact with the publisher to keep the number of messages in the route lower than the threshold."
The number of concurrent consumers can also be set as endpoint option. By setting 1 consumer (the default) exchanges are processed by a single thread: so"
the order of items in the stream is maintained. This value can be increased and the items will be processed concurrently (so not preserving the order)."
A snippet from the tests:"
```"
from(""reactive-streams:numbers?concurrentConsumers=5&maxInflightExchanges=10"")"
.to(""mock:endpoint"");"
```"
TODOS"
write proper documentation"
move some global options to the producer endpoint (need to find a way to do it properly)"
add the possibility to handle ""onError"" and ""onComplete"" events in the Camel route"
improve context shutdown by closing correctly all streams"
test with other frameworks (currently using rxjava2: reactive-streams TCK and custom pub/sub)"
check osgi compliance"
add the ReactiveStreamService to the spring-boot application context in the starter"
maybe add direct usage of Camel endpoints directly"
improve it after feedbacks"
You can merge this pull request into a Git repository by running:"
$ git pull https://github.com/nicolaferraro/camel CAMEL-10612"
Alternatively you can review and apply these changes as the patch at:"
https://github.com/apache/camel/pull/1412.patch"
To close this pull request: make a commit to your master/trunk branch"
with (at least) the following in the commit message:"
This closes #1412"
commit 1142a4139f6f5930cfa63339ac61fa1f80c5a757"
Author: Nicola Ferraro <ni.ferraro@gmail.com>"
Date: 2016-12-21T17:59:01Z"
CAMEL-10612: Reactive streams producer"
commit afc4eee98fcca1a6705fd58901262be453e5736d"
Author: Nicola Ferraro <ni.ferraro@gmail.com>"
Date: 2016-12-27T17:29:22Z"
CAMEL-10612: First complete implementation"
commit fd88fe0b97c232161d3d3df7203bcc26d27eb517"
Author: Nicola Ferraro <ni.ferraro@gmail.com>"
Date: 2017-01-03T11:46:39Z"
CAMEL-10612: Implemented subscriber verification and rx implementation"
commit 91cd0fc981b9616980a9a5befec41b17b487d447"
Author: Nicola Ferraro <ni.ferraro@gmail.com>"
Date: 2017-01-03T16:09:05Z"
CAMEL-10612: Support switching to a different implementation"
commit f99e7b40f4dbe9e49b0d4208db01594f32d21a26"
Author: Nicola Ferraro <ni.ferraro@gmail.com>"
Date: 2017-01-03T17:16:02Z"
CAMEL-10612: Added internal engine configuration"
commit 46cf793200ffcde69c9d0dc041020266e8063d9f"
Author: Nicola Ferraro <ni.ferraro@gmail.com>"
Date: 2017-01-04T18:59:58Z"
CAMEL-10612: Make sure backpressure can be combined with throttling route policy"
commit 807a5bd7b44142ed8f58e19b615efc18ae4fa7cd"
Author: Nicola Ferraro <ni.ferraro@gmail.com>"
Date: 2017-01-12T17:36:21Z"
CAMEL-10612: more consistent structure"
commit 861340af92916c58852aa75cdb1281fcd4545779"
Author: Nicola Ferraro <ni.ferraro@gmail.com>"
Date: 2017-01-13T11:53:55Z"
CAMEL-10612: fixes and test updates"
commit 6c45fc46032625cd80dd3852c1257d0d88f8d97a"
Author: Nicola Ferraro <ni.ferraro@gmail.com>"
Date: 2017-01-13T12:20:52Z"
CAMEL-10612: enhanced publisher backpressure with mixed slow and fast subscribers"
commit 7a6b987500374b268af7cec22ebfdd1b5b2a18e9"
Author: Nicola Ferraro <ni.ferraro@gmail.com>"
Date: 2017-01-15T09:32:04Z"
CAMEL-10612: fixed issue with route restart"
commit 5f6c24e5d4dfca4be2f0e143de12b4482e9c21d6"
Author: Nicola Ferraro <ni.ferraro@gmail.com>"
Date: 2017-01-15T09:40:27Z"
CAMEL-10612: fixed stream completion"
commit bd7d4d7f84e408cdd96af785f20933dc1d89ab18"
Author: Nicola Ferraro <ni.ferraro@gmail.com>"
Date: 2017-01-19T17:51:56Z"
CAMEL-10650: added backpressure strategy"
commit 8124a17be32dcdf90174fdd4d258edc95e40b04f"
Author: Nicola Ferraro <ni.ferraro@gmail.com>"
Date: 2017-01-20T00:03:17Z"
CAMEL-10650: added javadoc"
commit 9f6ae4fed93c5d11addba88402e340a18caaa3f7"
Author: Nicola Ferraro <ni.ferraro@gmail.com>"
Date: 2017-01-20T09:57:38Z"
CAMEL-10650: rebase with master"
commit 4f9e9a8208f3a2295b29e442ed9f52185d943a14"
Author: Nicola Ferraro <ni.ferraro@gmail.com>"
Date: 2017-01-20T10:21:22Z"
CAMEL-10650: source check------ASF GitHub Bot added a comment - 27/Jan/17 14:35"
Github user asfgit closed the pull request at:"
https://github.com/apache/camel/pull/1412------Nicola Ferraro added a comment - 27/Jan/17 14:49"
What still needs to be done:"
allow automatic discovery of publishers and subscribers"
make the buffer strategy a.. strategy"
write proper documentation"
move some global options to the producer endpoint (need to find a way to do it properly)"
add the possibility to handle ""onError"" and ""onComplete"" events in the Camel route"
improve context shutdown by closing correctly all streams"
test with other frameworks (currently using rxjava2: reactive-streams TCK and custom pub/sub)"
check osgi compliance"
add the ReactiveStreamService to the spring-boot application context in the starter"
add bidirectional in-out communication from camel to the external lib (using processors or similar)------Luca Burgazzoli added a comment - 27/Jan/17 15:05"
Nicola Ferraro really good work------Claus Ibsen added a comment - 29/Jan/17 17:01"
Can we please use junit for unit testing. camel-testng is deprecated and we should use junit so working on components is more the same.------Nicola Ferraro added a comment - 29/Jan/17 18:51"
Claus Ibsen the usage of testng is due to the implementation of the reactive-streams TCK (https://github.com/reactive-streams/reactive-streams-jvm/issues/216)."
Currently both kind of tests should be run by surefire. Camel component tests are using Junit as usual."
Is that a problem?------Nicola Ferraro added a comment - 30/Jan/17 08:45"
I was looking at the last point of adding a reactive way to exchange data (input-output) bewteen camel and an external lib and I'd like to implement something like this:"
http://docs.spring.io/spring/docs/5.0.0.M4/spring-framework-reference/html/web-reactive.html#web-reactive-server-annotation"
For Camel: it's a standard bean call that could be embedded in a route like:"
from(""timer:aaa"")"
.bean(myBean)"
But the argument and return types should be converted automatically to/from observables. Parameters can be converted to observables using standard type converters: but the return types should be unboxed in some way."
I think we don't apply conversions to return types automatically: so I think we can add eg. ""return type converter hooks""."
Something like this: https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java#L319-L333"
But pluggable in the components. Wdyt?------Claus Ibsen added a comment - 30/Jan/17 11:02"
Nicola"
Ah okay yeah its fine if its the TCK tests------Claus Ibsen added a comment - 30/Jan/17 11:10"
Nicola: I dont think it may have to be component specific about type conversion."
That link to the java bean component is because the bean component is ""special""."
I would suggest to see if you can do something in the reactive streams component: and do conversions there: because its this component that knows about the types used by observables. Also you may look at fallback type converter where you can do selective type conversion: maybe you need that if types are Mono / Flux or what those reactive types are.------Nicola Ferraro added a comment - 06/Feb/17 10:37"
Hi: I think we are almost done with this. I've also added examples and documentation: and also a client API that can use Camel endpoints directly. I've added in-only and in-out communication (both ways). For the auto-conversion during bean call (question above): I left it to be manually specified by the user for now (there's an example)."
The API has changed since the beginning of this issue: but I think now it's more consistent."
Users can define complex streams in Camel and pass them to the reactive framework: or just use URIs:"
// send the content of all files in ""inbox"" to a http URL"
Flux.from(camel.from(""file:inbox"": String.class)) // Reactor Core 3"
  .flatMap(file -> camel.to(""http://theurl/hello""))"
  // continue"
  .subscribe();"
The ""from"" and ""to"" methods create camel routes that use the reactive-streams component under the hood. They have a ""fromStream"" (was ""getPublisher"") and ""toStream"" counterpart that allow defining more complex routes in the Camel DSL side (they also allow to have fine grained control over eg. backpressure)."
I've also defined some rest services using the client API only (see examples)."
Claus Ibsen and Luca Burgazzoli: if you have time: can you give me the last feedback?------Luca Burgazzoli added a comment - 08/Feb/17 16:01"
Looks good to me------Claus Ibsen added a comment - 07/Apr/17 08:50"
Can we resolve this ticket and if there is more work in the future open new tickets for 2.20 release?------Nicola Ferraro added a comment - 07/Apr/17 09:25"
Resolved. Other work on related components (reactor: reactive-java2) has already been scheduled.------
 
Task,RESOLVED,Minor,Fixed,None,2.21.0,camel-restlet,Andrea Cosentino,Claus Ibsen,There is an unit test error when upgrading."
Also take a look at camel-restlet karaf feature as it seems it uses a different jackson version than the regular java does.,Comments------
 
Task,RESOLVED,Major,Fixed,None,2.19.0,camel-sjms,Claus Ibsen,Claus Ibsen,So people can bridge the error handler etc."
See nabble"
http://camel.465427.n5.nabble.com/Catching-Exception-tp5791552.html"
Mind this is only possible for the exceptions that the JMS client propagates to Camel.,Comments------Claus Ibsen added a comment - 18/Dec/16 13:08"
The batch consumer has been improved. Lets see if we can improve the regular consumer.------Claus Ibsen added a comment - 19/Dec/16 10:00"
You can use asyncStartListener for the consumer to start async and keep trying until its connected.------
 
Bug,RESOLVED,Minor,Fixed,2.18.1,2.18.2: 2.19.0,camel-spring-boot,Claus Ibsen,Minh Tran,In my main application: I can override the timeout by declaring my own ShutdownStrategy bean and setting the timeout property. However this seems to be ignored during unit tests and always uses 10s timeouts."
The bean is certainly being picked up because I see the following logging"
org.apache.camel.spring.boot.CamelAutoConfiguration - Using custom ShutdownStrategy: org.apache.camel.impl.DefaultShutdownStrategy@5b8b9b2d"
This is preventing me from doing any debugging during unit tests as it will always end the jvm before I can inspect anything.,Comments------Claus Ibsen added a comment - 19/Dec/16 18:33"
How are you doing your unit test: can you attach some sample project or point to a github repo with a sample?------Minh Tran added a comment - 19/Dec/16 22:48"
You need a unit test that runs the route in its own thread so that your unit test will end and camel will shutdown the context. The following exhibits the problem. You can set a breakpoint in org.apache.camel.processor.exceptionpolicy.DefaultExceptionPolicyStrategy.findMatchedExceptionPolicy() (this was what I was debugging) and wait for longer than 10sec."
@RunWith(CamelSpringBootRunner.class)"
@SpringBootTest"
public class MyTest {"
 @Configuration"
 @EnableAutoConfiguration"
 public static class Config extends SpringRouteBuilder {"
"
  @Override"
  public void configure() throws Exception {"
   from(""activemq:queue:a"").onException(RuntimeException.class).handled(true).end()"
                             .throwException(RuntimeException.class: ""something bad happened"");"
  }"
"
  @Bean"
  public ShutdownStrategy shutdownStrategy() {"
   DefaultShutdownStrategy strat = new DefaultShutdownStrategy();"
   // this is ignored"
   strat.setTimeout(60000);"
   return strat;"
  }"
"
 }"
"
 @Produce(uri = ""activemq:queue:a"")"
 private ProducerTemplate producer;"
"
 @Test"
 public void testHello() throws InterruptedException {"
  producer.sendBody(""hello"");"
 }"
}"
If we can just override the shutdown timeout in unit tests: this wouldn't be an issue. Looks like it might be fixed in 2.18.2 according to linked issue CAMEL-10619?------Claus Ibsen added a comment - 20/Dec/16 18:43"
Yeah CAMEL-10619 allows to configure this easier. But nevertheless a custom ShutdownStrategy @Bean should take precedence over default settings.------Claus Ibsen added a comment - 05/Jan/17 08:48"
Added unit test but cannot reproduce the issue. The custom shutdown are in use."
It could be that your unit tests are using mocks which has a default 10 sec timeout.------Minh Tran added a comment - 05/Jan/17 10:18"
If you run the unit test: you'll see the following appear in the logs"
INFO org.apache.camel.impl.DefaultShutdownStrategy - Starting to graceful shutdown 1 routes (timeout 10 seconds)"
Wouldn't you expect that message to say timeout in 60 seconds?------Minh Tran added a comment - 05/Jan/17 10:21"
And there are no assertions of mocks being done in that unit test so I don't believe the mock timeout is related here.------
 
Improvement,RESOLVED,Major,Fixed,None,2.19.0,camel-sjms,Claus Ibsen,Claus Ibsen,If you want to start asyncStartListener=true then the endpoint should not eager start the connection which would fail if the connection to a remote broker is not possible."
This defeats the purpose of asyncStartListener=true which is intended to defer starting this till on-demand.,Comments------
 
Improvement,RESOLVED,Major,Done,None,2.19.0,camel-spring-boot: (1),Nicola Ferraro,Claus Ibsen,I wonder if we can add some logic that can auto detect if we run in spring boot and if you have configured a spring boot data source using the spring boot style"
spring.datasource.url: jdbc:mysql://localhost:3306/o365investigations"
"
spring.datasource.username: <snip>"
"
spring.datasource.password: <snip>"
"
spring.datasource.driver-class-name: com.mysql.jdbc.Driver"
And then fallback and use that data source if none has been explicit configured on the component."
And wonder if we can do this in a way that don't require special coding?"
We could maybe add to camel-sql: that it attempts to lookup in registry of all types of DataSource and if there is only one instance: it uses that.,Comments------Claus Ibsen added a comment - 19/Dec/16 18:25"
See nabble"
http://camel.465427.n5.nabble.com/sql-component-using-spring-boot-datasource-tp5791719.html------Nicola Ferraro added a comment - 13/Feb/17 16:46"
Using a fallback strategy if the registry contains only 1 datasource (implemented at component level)."
I could have put 'spring-boot-starter-jdbc' into the transitive dependencies of our starter: but doing so: spring-boot forces you to bind a datasource to the registry. I left it optional (test dependency in the starter).------
 
Improvement,RESOLVED,Major,Fixed,None,2.18.2: 2.19.0,camel-spring-boot,Claus Ibsen,Claus Ibsen,So its easier to configure shutdown timeout: and the other values you can set,Comments------
 
Task,RESOLVED,Trivial,Fixed,None,2.19.0,None,Claus Ibsen,Chris Schultz,The documentation for Camel AMQP uses the connection factory:"
org.apache.qpid.jms.JmsConnectionFactory"
I think the connection factory should actually be different for AMQP v1.0?:"
org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl,Comments------Claus Ibsen added a comment - 20/Dec/16 12:15"
Here is how to edit the website"
http://camel.apache.org/how-do-i-edit-the-website.html------Claus Ibsen added a comment - 20/Dec/16 12:15"
And a PR to update the docs in the source code is welcome"
https://github.com/apache/camel/blob/master/components/camel-amqp/src/main/docs/amqp-component.adoc------Claus Ibsen added a comment - 18/Jan/17 11:15"
Fixed the adoc------
 
Bug,RESOLVED,Major,Fixed,2.18.1,2.21.0,camel-jetty,Claus Ibsen,Remco Schoen,I'm trying to create an API with Rest DSL and Swagger Java components. For hosting the API I want to use Jetty and use Basic Authentication to secure it."
With Jetty 8 the code below works: but with Camel 2.18.1 my code fails in Jetty 9 with this error:"
No LoginService for org.eclipse.jetty.security.authentication.BasicAuthenticator"
It seems that when the security handler is re-added for the api-docs: the loginService is gone and can not be found anymore in the beans store of the server. I see in Jetty configuration examples that the loginService is also added as a bean to the Jetty server. If it has been added: it can be found when re-adding the security handler.,Comments------Remco Schoen added a comment - 20/Dec/16 08:05"
Used dependencies:"
compile group: 'org.apache.camel': name: 'camel-core': version: '2.18.1'"
compile group: 'org.apache.camel': name: 'camel-spring': version: '2.18.1'"
compile group: 'org.apache.camel': name: 'camel-jetty': version: '2.18.1'"
compile group: 'org.apache.camel': name: 'camel-swagger-java': version: '2.18.1'"
compile group: 'org.apache.camel': name: 'camel-jackson': version: '2.18.1'------Claus Ibsen added a comment - 23/Jan/18 15:16"
Thanks I was able to reproduce this with latest code: and are working on a fix------Claus Ibsen added a comment - 23/Jan/18 15:32"
Thanks for the sample code.------
 
Task,RESOLVED,Minor,Fixed,None,2.19.0,camel-spring-boot-starters,Luca Burgazzoli,Luca Burgazzoli,As components-starter is platform specific (spring-boot) it should be moved to platforms/spring-boot/components-starter,Comments------
 
Task,RESOLVED,Major,Fixed,None,2.18.2: 2.19.0,camel-cxf,Claus Ibsen,Thomas Diesler,cxf-3.1.9 distributed with camel-2.19.x is not compatible with cxf-3.1.6 from wildfly-10.1.0.Final"
Caused by: java.lang.NoSuchMethodError: org.apache.cxf.message.Message.remove(Ljava/lang/Class;)Ljava/lang/Object;"
 at org.apache.camel.component.cxf.CxfEndpoint$CamelCxfClientImpl.setParameters(CxfEndpoint.java:1239)"
 at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:470)"
 at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:416)"
 at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:133)"
CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/1546,Comments------ASF GitHub Bot added a comment - 20/Dec/16 09:59"
GitHub user tdiesler opened a pull request:"
https://github.com/apache/camel/pull/1357"
CAMEL-10623 Camel CXF version not compatible with WildFly CXF"
You can merge this pull request into a Git repository by running:"
$ git pull https://github.com/tdiesler/camel CAMEL-10623"
Alternatively you can review and apply these changes as the patch at:"
https://github.com/apache/camel/pull/1357.patch"
To close this pull request: make a commit to your master/trunk branch"
with (at least) the following in the commit message:"
This closes #1357"
commit a5d14422edf6f5c972c759545ff144488b08ae72"
Author: Thomas Diesler <thomas.diesler@jboss.com>"
Date: 2016-12-20T09:58:31Z"
CAMEL-10623 Camel CXF version not compatible with WildFly CXF------ASF GitHub Bot added a comment - 20/Dec/16 10:05"
GitHub user tdiesler opened a pull request:"
https://github.com/apache/camel/pull/1358"
CAMEL-10623 Camel CXF version not compatible with WildFly CXF"
You can merge this pull request into a Git repository by running:"
$ git pull https://github.com/tdiesler/camel CAMEL-10623m"
Alternatively you can review and apply these changes as the patch at:"
https://github.com/apache/camel/pull/1358.patch"
To close this pull request: make a commit to your master/trunk branch"
with (at least) the following in the commit message:"
This closes #1358"
commit 895a91b5c4a8f20ebaca37848ddd9c703f42c920"
Author: Thomas Diesler <thomas.diesler@jboss.com>"
Date: 2016-12-20T09:58:31Z"
CAMEL-10623 Camel CXF version not compatible with WildFly CXF------ASF GitHub Bot added a comment - 20/Dec/16 12:37"
Github user asfgit closed the pull request at:"
https://github.com/apache/camel/pull/1358------ASF GitHub Bot added a comment - 20/Dec/16 12:37"
Github user asfgit closed the pull request at:"
https://github.com/apache/camel/pull/1357------
 
New Feature,RESOLVED,Major,Won't Fix,None,None,None,Unassigned,Oliver Wulff,Add a new processor to set custom MDC properties in a route:"
<setMDC name=""foo""><header name=""bar""></setMDC>"
The above command will create an MDC property with key ""camel.foo"""
Enhance the current MDCUnitOfWork to support all MDC values starting with ""camel.*"",Comments------Claus Ibsen added a comment - 06/Aug/19 09:22"
This is not really an EIP. You can use a bean/processor for that.------
 
